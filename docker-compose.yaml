version: '3.8'

networks:
  test-network:
    name: test-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.100.10.0/24
services:
  mosquitto:
    image: eclipse-mosquitto:2
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      test-network:
        ipv4_address: 172.100.10.5
  mosquitto-publisher:
    build:
      context: ./mosquitto-publisher
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    depends_on:
      - mosquitto
    networks:
      test-network:
        ipv4_address: 172.100.10.6
  mosquitto-subscriber:
    build:
      context: ./mosquitto-subscriber
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    depends_on:
      - mosquitto
    networks:
      test-network:
        ipv4_address: 172.100.10.7    
  zookeeper:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog
    networks:
      test-network:
        ipv4_address: 172.100.10.10
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "realtime-data:1:1"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      test-network:
        ipv4_address: 172.100.10.11
  kafka-mqtt-connector:
    image: arthurgrigo/simple-kafka-mqtt-connector:0.1.0
    restart: always
    hostname: simple-kafka-mqtt-connector
    container_name: simple-kafka-mqtt-connector
    environment:
      KAFKA_HOST: 172.100.10.11 #EDITME IP THROUGH WHICH THE KAFKA BROKER WILL BE REACHED
      KAFKA_PORT: 9092
      KAFKA_CLIENT_ID: simple-kafka-mqtt-connector-1
      MQTT_HOST: 172.100.10.5 #EDITME IP THROUGH WHICH THE MQTT BROKER WILL BE REACHED
      MQTT_PORT: 1883
      MQTT_CLIENT_ID: simple-kafka-mqtt-connector-1
      MQTT_QOS: 2
      TOPIC_MAPPING: farm_id/device_id/testclient1>>>realtime-data #EDITME mqttTopicA>>>kafkaTopicA;mqttTopicB>>>kafkaTopicB;mqttTopicC>>>kafkaTopicC
    depends_on:
      - kafka
      - mosquitto
    networks:
      test-network:
        ipv4_address: 172.100.10.12
  debezium-jdbc-sink-connector:
    image: debezium/connect
    restart: always
    hostname: debezium-jdbc-sink-connector
    container_name: debezium-jdbc-sink-connector
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: debezium-jdbc-sink-connector
      BOOTSTRAP_SERVERS: 172.100.10.11:9092
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka-connect/jdbc-sink-connector.json:/conf/jdbc-sink-connector.json
    depends_on:
      - zookeeper
      - kafka
      - postgres
    command:
      - bash
      - -c
      - |
        echo "Wainting for kafka connect to start..."
        until [[ "$$(curl -s -o /dev/null -w %{http_code} 172.100.10.13:8083/connectors)" -eq 200 ]]; do
          echo "test"
          sleep 1
        done
        echo -e "Sending connector"
        curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" 172.100.10.13:8083/connectors/ -d @/conf/jdbc-sink-connector.json
    networks:
      test-network:
        ipv4_address: 172.100.10.13
  
  postgres:
    image: postgres:latest
    # build:
    # context: ./postgres
    # dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: admin # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: admin # The PostgreSQL password (useful to connect to the database)
      # POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/configdb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/db/:/var/lib/postgresql/data/
    networks:
      test-network:
        ipv4_address: 172.100.10.20
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      test-network:
        ipv4_address: 172.100.10.21
  mongo-db:
    image: mongo:4.0.5
    hostname: mongo-db
    container_name: mongo-db
    expose:
      - "27017"
    ports:
      - "27017:27017"
    command: --bind_ip_all --smallfiles
    volumes:
      - ./mongo-db:/data
    networks:
      test-network:
        ipv4_address: 172.100.10.22
  mongoclient:
    image: mongoclient/mongoclient:2.2.0
    container_name: mongoclient
    hostname: mongoclient
    depends_on:
      - mongo-db
    ports:
      - 3000:3000
    environment:
      MONGO_URL: "mongodb://mongo-db:27017"
      PORT: 3000
    expose:
      - "3000"
    networks:
      test-network:
        ipv4_address: 172.100.10.23