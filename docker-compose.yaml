version: '3.8'

networks:
  test-network:
    name: test-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.100.10.0/24
services:
  mosquitto:
    image: eclipse-mosquitto:2
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      test-network:
        ipv4_address: 172.100.10.5
  mosquitto-publisher:
    build:
      context: ./mosquitto-publisher
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    depends_on:
      - mosquitto
    networks:
      test-network:
        ipv4_address: 172.100.10.6  
  zookeeper:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog
    networks:
      test-network:
        ipv4_address: 172.100.10.10
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "realtime-data:1:1,cdc.tbl-temperature-moisture:1:1"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      test-network:
        ipv4_address: 172.100.10.11
  kafka-connect:
    # image: confluentinc/cp-kafka-connect:latest
    build:
      context: ./kafka-connect
      dockerfile: Dockerfile
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 172.100.10.11:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
      CONNECT_LOG4J_ROOT_LOGLEVEL: DEBUG
    #  CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars 
    # volumes:
    #  - ./kafka-connect/jars/:/etc/kafka-connect/jars 
    ports:
      - "8083:8083"
    networks:
      test-network:
        ipv4_address: 172.100.10.12
  ingestor:
    build:
      context: ./go-ingestor
      dockerfile: Dockerfile
    environment:
      CONFIG_FILE: /config/config.yaml
    volumes:
      - ./go-ingestor/config/config.yaml:/config/config.yaml
    restart: always
    hostname: ingestor
    container_name: ingestor
    depends_on:
      - zookeeper
      - kafka
    networks:
      test-network:
        ipv4_address: 172.100.10.13

  timescaledb:
    image: timescale/timescaledb-ha:pg15-latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - ./timescaledb/config/020_init.sql:/docker-entrypoint-initdb.d/020_init.sql
      - ./timescaledb/config/021_insert_data.sql:/docker-entrypoint-initdb.d/021_insert_data.sql
      - ./timescaledb/data:/var/lib/postgresql/data/
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=1", "-c", "max_replication_slots=1"]
    networks:
      test-network:
        ipv4_address: 172.100.10.20
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      test-network:
        ipv4_address: 172.100.10.21
